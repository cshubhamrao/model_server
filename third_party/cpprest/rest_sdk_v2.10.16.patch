diff --git a/Release/CMakeLists.txt b/Release/CMakeLists.txt
index 13a3f01d..8f326366 100644
--- a/Release/CMakeLists.txt
+++ b/Release/CMakeLists.txt
@@ -166,7 +166,7 @@ elseif(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
   message("-- Setting gcc options")
 
   set(WARNINGS -Wall -Wextra -Wunused-parameter -Wcast-align -Wcast-qual -Wconversion -Wformat=2 -Winit-self -Winvalid-pch -Wmissing-format-attribute -Wmissing-include-dirs -Wpacked -Wredundant-decls -Wunreachable-code)
-  set(LD_FLAGS "${LD_FLAGS} -Wl,-z,defs")
+  set(LD_FLAGS "${LD_FLAGS} -Wl,-z,defs,--exclude-libs,ALL")
 
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fno-strict-aliasing")
   if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.8)
diff --git a/Release/cmake/cpprest_find_boost.cmake b/Release/cmake/cpprest_find_boost.cmake
index 3c857baf..d3f27bcd 100644
--- a/Release/cmake/cpprest_find_boost.cmake
+++ b/Release/cmake/cpprest_find_boost.cmake
@@ -46,7 +46,7 @@ function(cpprest_find_boost)
     endif()
     cpprestsdk_find_boost_android_package(Boost ${BOOST_VERSION} EXACT REQUIRED COMPONENTS random system thread filesystem chrono atomic)
   elseif(UNIX)
-    find_package(Boost REQUIRED COMPONENTS random system thread filesystem chrono atomic date_time regex)
+    find_package(Boost REQUIRED COMPONENTS log random system thread filesystem chrono atomic date_time regex)
   else()
     find_package(Boost REQUIRED COMPONENTS system date_time regex)
   endif()
@@ -86,6 +86,7 @@ function(cpprest_find_boost)
       )
     elseif(UNIX)
       target_link_libraries(cpprestsdk_boost_internal INTERFACE
+	Boost::log
         Boost::boost
         Boost::random
         Boost::system
@@ -96,6 +97,7 @@ function(cpprest_find_boost)
         Boost::date_time
         Boost::regex
       )
+      target_link_libraries(cpprestsdk_boost_internal PRIVATE "-Wl,--exclude-libs,ALL")
     else()
       target_link_libraries(cpprestsdk_boost_internal INTERFACE
         Boost::boost
diff --git a/Release/cmake/cpprest_find_openssl.cmake b/Release/cmake/cpprest_find_openssl.cmake
index 93336636..40024f69 100644
--- a/Release/cmake/cpprest_find_openssl.cmake
+++ b/Release/cmake/cpprest_find_openssl.cmake
@@ -3,67 +3,23 @@ function(cpprest_find_openssl)
     return()
   endif()
 
-  if(IOS)
-    set(IOS_SOURCE_DIR "${PROJECT_SOURCE_DIR}/../Build_iOS")
 
-    set(OPENSSL_INCLUDE_DIR "${IOS_SOURCE_DIR}/openssl/include" CACHE INTERNAL "")
     set(OPENSSL_LIBRARIES
-      "${IOS_SOURCE_DIR}/openssl/lib/libcrypto.a"
-      "${IOS_SOURCE_DIR}/openssl/lib/libssl.a"
-      CACHE INTERNAL ""
-      )
-    set(_SSL_LEAK_SUPPRESS_AVAILABLE ON CACHE INTERNAL "")
-  elseif(ANDROID)
-    if(ARM)
-      set(OPENSSL_INCLUDE_DIR "${CMAKE_BINARY_DIR}/../openssl/armeabi-v7a/include" CACHE INTERNAL "")
-      set(OPENSSL_LIBRARIES
-        "${CMAKE_BINARY_DIR}/../openssl/armeabi-v7a/lib/libssl.a"
-        "${CMAKE_BINARY_DIR}/../openssl/armeabi-v7a/lib/libcrypto.a"
-        CACHE INTERNAL ""
-        )
-    else()
-      set(OPENSSL_INCLUDE_DIR "${CMAKE_BINARY_DIR}/../openssl/x86/include" CACHE INTERNAL "")
-      set(OPENSSL_LIBRARIES
-        "${CMAKE_BINARY_DIR}/../openssl/x86/lib/libssl.a"
-        "${CMAKE_BINARY_DIR}/../openssl/x86/lib/libcrypto.a"
-        CACHE INTERNAL ""
-        )
-    endif()
-    set(_SSL_LEAK_SUPPRESS_AVAILABLE ON CACHE INTERNAL "")
-  else()
-    if(APPLE)
-      if(NOT DEFINED OPENSSL_ROOT_DIR)
-        # Prefer a homebrew version of OpenSSL over the one in /usr/lib
-        file(GLOB OPENSSL_ROOT_DIR /usr/local/Cellar/openssl*/*)
-        # Prefer the latest (make the latest one first)
-        list(REVERSE OPENSSL_ROOT_DIR)
-        list(GET OPENSSL_ROOT_DIR 0 OPENSSL_ROOT_DIR)
-      endif()
-      # This should prevent linking against the system provided 0.9.8y
-      message(STATUS "OPENSSL_ROOT_DIR = ${OPENSSL_ROOT_DIR}")
-      set(_OPENSSL_VERSION "")
-    endif()
-    if(UNIX)
-      find_package(PkgConfig)
-      pkg_search_module(OPENSSL openssl)
-    endif()
-    if(OPENSSL_FOUND)
-      target_link_libraries(cpprest PRIVATE ${OPENSSL_LDFLAGS})
-    else()
-      find_package(OpenSSL 1.0.0 REQUIRED)
-    endif()
 
   add_library(cpprestsdk_openssl_internal INTERFACE)
   if(TARGET OpenSSL::SSL)
diff --git a/Release/src/CMakeLists.txt b/Release/src/CMakeLists.txt
index a2d4d30b..b8b45c55 100644
--- a/Release/src/CMakeLists.txt
+++ b/Release/src/CMakeLists.txt
@@ -190,6 +190,7 @@ if(CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR CMAKE_CXX_COMPILER_ID MATCHES "GNU")
     target_compile_options(cpprest PRIVATE -Werror)
   endif()
   target_compile_options(cpprest PRIVATE -pedantic ${WARNINGS})
+  target_link_libraries(cpprest PRIVATE "-Wl,--exclude-libs,ALL")
 elseif(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
   if(WERROR)
     target_compile_options(cpprest PRIVATE /WX ${WARNINGS})

